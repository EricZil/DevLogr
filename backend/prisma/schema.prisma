// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  username    String?    @unique
  name        String?
  bio         String?    @db.Text
  avatar      String?
  location    String?
  website     String?
  
  password    String?
  role        UserRole   @default(USER)
  status      UserStatus @default(PENDING_VERIFICATION)
  
  emailVerified      DateTime?
  emailVerifyToken   String?   @unique
  emailVerifyExpires DateTime?
  
  resetToken         String?   @unique
  resetTokenExpires  DateTime?
  
  providers    UserProvider[]
  
  lastLogin    DateTime?
  loginCount   Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  projects     Project[]
  sessions     Session[]
  taskComments TaskComment[]
  timeEntries  TimeEntry[]
  issueComments IssueComment[]
  feedbackComments FeedbackComment[]
  
  @@map("users")
}

model UserProvider {
  id           String       @id @default(cuid())
  userId       String
  provider     AuthProvider
  providerId   String

  accessToken  String?      @db.Text
  refreshToken String?      @db.Text
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@unique([provider, providerId])
  @@map("user_providers")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  
  ipAddress    String?
  userAgent    String?  @db.Text
  lastUsed     DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("sessions")
}


enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
  PAUSED
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum FeedbackCategory {
  GENERAL
  FEATURE_REQUEST
  IMPROVEMENT
  PRAISE
}

model Project {
  id          String            @id @default(cuid())
  userId      String
  
  title       String
  description String?           @db.Text
  slug        String            @unique
  
  status      ProjectStatus     @default(DRAFT)
  visibility  ProjectVisibility @default(PUBLIC)
  
  progress    Int               @default(0)
  startDate   DateTime?
  endDate     DateTime?
  
  allowIssues   Boolean         @default(true)
  allowFeedback Boolean         @default(true)
  
  customDomain    String?
  domainVerified  Boolean         @default(false)
  sslEnabled      Boolean         @default(false)

  theme       String?
  banner      String?
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]
  updates     ProjectUpdate[]
  tags        ProjectTag[]
  issues      Issue[]
  feedback    Feedback[]
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  @@index([userId])
  @@index([slug])
  @@index([userId, updatedAt])
  @@index([visibility, status])
  @@map("projects")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  
  title       String
  description String?  @db.Text
  dueDate     DateTime?
  completedAt DateTime?
  progress    Int      @default(0)
  
  order       Int      @default(0)
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([projectId, order])
  @@index([projectId, createdAt])
  @@map("milestones")
}

model Task {
  id           String      @id @default(cuid())
  milestoneId  String
  
  title        String
  description  String?     @db.Text
  status       TaskStatus  @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  
  estimatedHours Float?
  actualHours    Float?     @default(0)
  
  dueDate      DateTime?
  startDate    DateTime?
  completedAt  DateTime?
  
  dependsOn    TaskDependency[] @relation("TaskDependencies")
  cancelledBy    TaskDependency[] @relation("CancelledTasks")
  
  assigneeId   String?
  
  order        Int         @default(0)
  
  milestone    Milestone   @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  subtasks     Subtask[]
  comments     TaskComment[]
  timeEntries  TimeEntry[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([milestoneId])
  @@index([milestoneId, order])
  @@index([status])
  @@index([assigneeId])
  @@map("tasks")
}

model Subtask {
  id          String   @id @default(cuid())
  taskId      String
  
  title       String
  completed   Boolean  @default(false)
  order       Int      @default(0)
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([taskId])
  @@index([taskId, order])
  @@map("subtasks")
}

model TaskDependency {
  id           String @id @default(cuid())
  taskId       String
  dependsOnId  String
  
  task         Task   @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn    Task   @relation("CancelledTasks", fields: [dependsOnId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  
  @@unique([taskId, dependsOnId])
  @@map("task_dependencies")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  
  content   String   @db.Text
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([taskId])
  @@index([userId])
  @@map("task_comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  
  hours       Float
  description String?  @db.Text
  date        DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([taskId])
  @@index([userId])
  @@index([date])
  @@map("time_entries")
}

enum UpdateType {
  PROGRESS
  MILESTONE
  FEATURE
  BUGFIX
  ANNOUNCEMENT
  RELEASE
}

model ProjectUpdate {
  id        String     @id @default(cuid())
  projectId String
  
  title     String
  content   String     @db.Text
  type      UpdateType @default(PROGRESS)
  
  images    String?    @db.Text
  
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([projectId])
  @@index([projectId, createdAt])
  @@map("project_updates")
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  color    String?
  
  projects ProjectTag[]
  
  createdAt DateTime    @default(now())
  
  @@map("tags")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  tagId     String
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, tagId])
  @@index([projectId])
  @@map("project_tags")
}


enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueCategory {
  BUG
  FEATURE_REQUEST
  IMPROVEMENT
  QUESTION
}

model Issue {
  id            String         @id @default(cuid())
  projectId     String

  reporterId    String?
  reporterName  String
  reporterEmail String?

  title         String
  description   String         @db.Text
  status        IssueStatus    @default(OPEN)
  priority      IssuePriority  @default(MEDIUM)
  category      IssueCategory  @default(BUG)

  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  comments      IssueComment[]
  @@index([projectId])
  @@map("issues")
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String
  userId    String
  content   String   @db.Text

  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([issueId])
  @@map("issue_comments")
}

model Feedback {
  id             String           @id @default(cuid())
  projectId      String
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  message        String           @db.Text
  rating         Int
  category       FeedbackCategory @default(GENERAL)
  submitterName  String
  submitterEmail String?

  comments       FeedbackComment[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([projectId])
  @@map("feedback")
}

model FeedbackComment {
  id         String   @id @default(cuid())
  feedbackId String
  userId     String
  content    String   @db.Text

  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@index([feedbackId])
  @@map("feedback_comments")
}
